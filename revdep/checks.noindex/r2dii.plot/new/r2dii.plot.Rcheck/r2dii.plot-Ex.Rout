
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "r2dii.plot"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('r2dii.plot')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("market_share")
> ### * market_share
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: market_share
> ### Title: An example of a 'market_share'-like dataset
> ### Aliases: market_share
> ### Keywords: datasets
> 
> ### ** Examples
> 
> market_share
# A tibble: 1,170 × 8
   sector     technology  year region scenario_source metric          production
   <chr>      <chr>      <int> <chr>  <chr>           <chr>                <dbl>
 1 automotive electric    2020 global demo_2020       projected          145942.
 2 automotive electric    2020 global demo_2020       corporate_econ…   8134869.
 3 automotive electric    2020 global demo_2020       target_cps         145942.
 4 automotive electric    2020 global demo_2020       target_sds         145942.
 5 automotive electric    2020 global demo_2020       target_sps         145942.
 6 automotive electric    2021 global demo_2020       projected          148212.
 7 automotive electric    2021 global demo_2020       corporate_econ…   8183411.
 8 automotive electric    2021 global demo_2020       target_cps         148361.
 9 automotive electric    2021 global demo_2020       target_sds         160625.
10 automotive electric    2021 global demo_2020       target_sps         149016.
# … with 1,160 more rows, and 1 more variable: technology_share <dbl>
> 
> 
> 
> cleanEx()
> nameEx("plot_emission_intensity")
> ### * plot_emission_intensity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_emission_intensity
> ### Title: Create an emission intensity plot
> ### Aliases: plot_emission_intensity
> 
> ### ** Examples
> 
> # `data` must meet documented "Requirements"
> data <- subset(sda, sector == "cement")
> plot_emission_intensity(data)
Removing data before 2020 -- the start year of 'projected'.
> 
> # plot with `qplot_emission_intensity()` parameters
> plot_emission_intensity(
+   data,
+   span_5yr = TRUE,
+   convert_label = to_title
+ )
Removing data before 2020 -- the start year of 'projected'.
> 
> 
> 
> cleanEx()
> nameEx("plot_techmix")
> ### * plot_techmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_techmix
> ### Title: Create a techmix plot
> ### Aliases: plot_techmix
> 
> ### ** Examples
> 
> # `data` must meet documented "Requirements"
> data <- subset(
+   market_share,
+   scenario_source == "demo_2020" &
+     sector == "power" &
+     region == "global" &
+     metric %in% c("projected", "corporate_economy", "target_sds")
+ )
> 
> plot_techmix(data)
The `technology_share` values are plotted for extreme years.
Do you want to plot different years? E.g. filter data with:`subset(data, year %in% c(2020, 2030))`.
> 
> # plot with `qplot_techmix()` parameters
> plot_techmix(
+   data,
+   span_5yr = TRUE,
+   convert_label = recode_metric_techmix,
+   convert_tech_label = spell_out_technology
+ )
The `technology_share` values are plotted for extreme years.
Do you want to plot different years? E.g. filter data with:`subset(data, year %in% c(2020, 2030))`.
> 
> 
> 
> cleanEx()
> nameEx("plot_trajectory")
> ### * plot_trajectory
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_trajectory
> ### Title: Create a trajectory plot
> ### Aliases: plot_trajectory
> 
> ### ** Examples
> 
> # `data` must meet documented "Requirements"
> data <- subset(
+   market_share,
+   sector == "power" &
+     technology == "renewablescap" &
+     region == "global" &
+     scenario_source == "demo_2020"
+ )
> 
> plot_trajectory(data)
Normalizing `production` values to 2020 -- the start year.
> 
> # plot with `qplot_trajectory()` parameters
> plot_trajectory(
+   data,
+   span_5yr = TRUE,
+   convert_label = format_metric
+ )
Normalizing `production` values to 2020 -- the start year.
> 
> 
> 
> cleanEx()
> nameEx("qplot_emission_intensity")
> ### * qplot_emission_intensity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qplot_emission_intensity
> ### Title: Create a quick emission intensity plot
> ### Aliases: qplot_emission_intensity
> 
> ### ** Examples
> 
> # `data` must meet documented "Requirements"
> data <- subset(sda, sector == "cement")
> 
> qplot_emission_intensity(data)
Removing data before 2020 -- the start year of 'projected'.
> 
> 
> 
> cleanEx()
> nameEx("qplot_techmix")
> ### * qplot_techmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qplot_techmix
> ### Title: Create a quick techmix plot
> ### Aliases: qplot_techmix
> 
> ### ** Examples
> 
> # `data` must meet documented "Requirements"
> data <- subset(
+   market_share,
+   sector == "power" &
+     region == "global" &
+     scenario_source == "demo_2020" &
+     metric %in% c("projected", "corporate_economy", "target_sds")
+ )
> 
> qplot_techmix(data)
The `technology_share` values are plotted for extreme years.
Do you want to plot different years? E.g. filter data with:`subset(data, year %in% c(2020, 2030))`.
> 
> 
> 
> cleanEx()
> nameEx("qplot_trajectory")
> ### * qplot_trajectory
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qplot_trajectory
> ### Title: Create a quick trajectory plot
> ### Aliases: qplot_trajectory
> 
> ### ** Examples
> 
> # `data` must meet documented "Requirements"
> data <- subset(
+   market_share,
+   sector == "power" &
+     technology == "renewablescap" &
+     region == "global" &
+     scenario_source == "demo_2020"
+ )
> 
> qplot_trajectory(data)
Normalizing `production` values to 2020 -- the start year.
> 
> 
> 
> cleanEx()
> nameEx("r2dii_colours")
> ### * r2dii_colours
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: r2dii_colours
> ### Title: Colour datasets
> ### Aliases: r2dii_colours palette_colours scenario_colours sector_colours
> ###   technology_colours
> ### Keywords: datasets internal
> 
> ### ** Examples
> 
> r2dii.plot:::palette_colours
# A tibble: 9 × 2
  label       hex    
  <chr>       <chr>  
1 dark_blue   #1b324f
2 green       #00c082
3 orange      #ff9623
4 grey        #d0d7e1
5 dark_purple #574099
6 yellow      #f2e06e
7 soft_blue   #78c4d6
8 ruby_red    #a63d57
9 moss_green  #4a5e54
> 
> r2dii.plot:::scenario_colours
# A tibble: 5 × 2
  label        hex    
  <chr>        <chr>  
1 dark_green   #768555
2 light_green  #9CAB7C
3 dark_yellow  #FFFFCC
4 light_yellow #FDE291
5 red          #E07B73
> 
> r2dii.plot:::sector_colours
# A tibble: 8 × 2
  label      hex    
  <chr>      <chr>  
1 automotive #78C4D6
2 aviation   #00c082
3 cement     #c1b358
4 coal       #4e3b37
5 oil&gas    #181716
6 power      #a63603
7 shipping   #574099
8 steel      #a63d57
> 
> r2dii.plot:::technology_colours
# A tibble: 18 × 3
   sector       technology    hex    
   <chr>        <chr>         <chr>  
 1 power        coalcap       #7A2701
 2 power        oilcap        #a63603
 3 power        gascap        #e6550d
 4 power        nuclearcap    #fd8d3c
 5 power        hydrocap      #fdbe85
 6 power        renewablescap #ffd4ad
 7 automotive   ice_hdv       #548995
 8 automotive   ice           #609cab
 9 automotive   hybrid_hdv    #6cb0c0
10 automotive   hybrid        #78c4d6
11 automotive   fuelcell      #93cfde
12 automotive   electric_hdv  #aedbe6
13 automotive   electric      #c9e7ee
14 oil&gas      gas           #b9b5b0
15 oil&gas      oil           #181716
16 fossil fuels gas           #b9b5b0
17 fossil fuels oil           #181716
18 fossil fuels coal          #4e3b37
> 
> 
> 
> cleanEx()
> nameEx("scale_colour_r2dii")
> ### * scale_colour_r2dii
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scale_colour_r2dii
> ### Title: Custom 2DII colour and fill scales
> ### Aliases: scale_colour_r2dii scale_color_r2dii scale_fill_r2dii
> 
> ### ** Examples
> 
> library(ggplot2, warn.conflicts = FALSE)
> 
> ggplot(mpg) +
+   geom_point(aes(displ, hwy, color = class)) +
+   scale_colour_r2dii()
> 
> ggplot(mpg) +
+   geom_histogram(aes(cyl, fill = class), position = "dodge", bins = 5) +
+   scale_fill_r2dii()
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("scale_colour_r2dii_sector")
> ### * scale_colour_r2dii_sector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scale_colour_r2dii_sector
> ### Title: Custom 2DII sector colour and fill scales
> ### Aliases: scale_colour_r2dii_sector scale_color_r2dii_sector
> ###   scale_fill_r2dii_sector
> 
> ### ** Examples
> 
> library(ggplot2, warn.conflicts = FALSE)
> 
> ggplot(mpg) +
+   geom_point(aes(displ, hwy, color = class)) +
+   scale_colour_r2dii_sector()
> 
> ggplot(mpg) +
+   geom_histogram(aes(cyl, fill = class), position = "dodge", bins = 5) +
+   scale_fill_r2dii_sector()
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("scale_colour_r2dii_tech")
> ### * scale_colour_r2dii_tech
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scale_colour_r2dii_tech
> ### Title: Custom 2DII technology colour and fill scales
> ### Aliases: scale_colour_r2dii_tech scale_color_r2dii_tech
> ###   scale_fill_r2dii_tech
> 
> ### ** Examples
> 
> library(ggplot2, warn.conflicts = FALSE)
> 
> ggplot(mpg) +
+   geom_point(aes(displ, hwy, color = class)) +
+   scale_colour_r2dii_tech("automotive")
> 
> ggplot(mpg) +
+   geom_histogram(aes(cyl, fill = class), position = "dodge", bins = 5) +
+   scale_fill_r2dii_tech("automotive")
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("sda")
> ### * sda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sda
> ### Title: An example of an 'sda'-like dataset
> ### Aliases: sda
> ### Keywords: datasets
> 
> ### ** Examples
> 
> sda
# A tibble: 208 × 4
   sector      year emission_factor_metric emission_factor_value
   <chr>      <dbl> <chr>                                  <dbl>
 1 automotive  2002 projected                              0.228
 2 automotive  2003 projected                              0.226
 3 automotive  2004 projected                              0.224
 4 automotive  2005 projected                              0.222
 5 automotive  2006 projected                              0.220
 6 automotive  2007 projected                              0.218
 7 automotive  2008 projected                              0.216
 8 automotive  2009 projected                              0.214
 9 automotive  2010 projected                              0.212
10 automotive  2011 projected                              0.210
# … with 198 more rows
> 
> 
> 
> cleanEx()
> nameEx("theme_2dii")
> ### * theme_2dii
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: theme_2dii
> ### Title: Complete theme
> ### Aliases: theme_2dii
> 
> ### ** Examples
> 
> library(ggplot2, warn.conflicts = FALSE)
> 
> ggplot(mtcars) +
+   geom_histogram(aes(mpg), bins = 10) +
+   theme_2dii()
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("to_title")
> ### * to_title
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: to_title
> ### Title: Replicate labels produced with qplot_*() functions
> ### Aliases: to_title format_metric recode_metric_techmix
> ###   spell_out_technology
> 
> ### ** Examples
> 
> to_title(c("a.string", "another_STRING"))
[1] "A String"       "Another String"
> 
> metric <- c("projected", "corporate_economy", "target_xyz", "else")
> format_metric(metric)
[1] "Projected"         "Corporate Economy" "XYZ"              
[4] "Else"             
> 
> recode_metric_techmix(metric)
[1] "Portfolio" "Benchmark" "Scenario"  "Benchmark"
> 
> spell_out_technology(c("gas", "ice", "coalcap", "hdv"))
[1] "Gas"                 "ICE"                 "Coal Capacity"      
[4] "Heavy Duty Vehicles"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.598 0.148 7.131 0.001 0.002 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
