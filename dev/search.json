[{"path":"https://rmi-pacta.github.io/r2dii.match/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Rocky Mountain Institute Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/chunk-your-data.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Using `match_name()` with large loanbooks","text":"example uses r2dii.match plus optional convenient packages, including r2dii.data example datasets. entire loanbook large, feed match_name() smaller chunks, call match_name(this_chunk, abcd) fits memory. chunks take longer run use less memory; ’ll need experiment find number chunks best works . Say try three chunks. can take loanbook dataset use mutate() add new column chunk, assigns row one chunks: total number rows entire loanbook equals sum rows across chunks. chunk need repeat process: Match chunk entire abcd dataset. chunk matched nothing, move next chunk. Else, save result .csv file. result one .csv file per chunk. can read combine files one step vroom(). matched result similar match_name(loanbook, abcd). next steps documented Home page Get started sections package website.","code":"# Packages library(dplyr, warn.conflicts = FALSE) library(fs) library(vroom) library(r2dii.data) library(r2dii.match)  # Example datasets from the r2dii.data package loanbook <- loanbook_demo abcd <- abcd_demo chunks <- 3 chunked <- loanbook %>% mutate(chunk = as.integer(cut(row_number(), chunks))) count(loanbook) #> # A tibble: 1 × 1 #>       n #>   <int> #> 1   283  count(chunked, chunk) #> # A tibble: 3 × 2 #>   chunk     n #>   <int> <int> #> 1     1    95 #> 2     2    94 #> 3     3    94 # This \"output\" directory is temporary; you may use any folder in your computer out <- path(tempdir(), \"output\") if (!dir_exists(out)) dir_create(out)  for (i in unique(chunked$chunk)) {   # 1. Match this chunk against the entire `abcd` dataset.   this_chunk <- filter(chunked, chunk == i)   this_result <- match_name(this_chunk, abcd)      # 2. If this chunk matched nothing, move to the next chunk   matched_nothing <- nrow(this_result) == 0L   if (matched_nothing) next()      # 3. Else, save the result to a .csv file.   vroom_write(this_result, path(out, paste0(i, \".csv\"))) } dir_ls(out) #> /tmp/RtmpALDW9A/output/1.csv /tmp/RtmpALDW9A/output/2.csv  #> /tmp/RtmpALDW9A/output/3.csv matched <- vroom(dir_ls(out)) #> Rows: 329 Columns: 29 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (22): id_loan, id_direct_loantaker, name_direct_loantaker, id_intermedia... #> dbl  (4): loan_size_outstanding, loan_size_credit_limit, chunk, score #> lgl  (3): name_project, isin_direct_loantaker, borderline #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. matched #> # A tibble: 329 × 29 #>    id_loan id_direct_loantaker name_direct_loantaker      id_intermediate_pare…¹ #>    <chr>   <chr>               <chr>                      <chr>                  #>  1 L1      C294                Vitale Group               NA                     #>  2 L3      C292                Rowe-Rowe                  IP5                    #>  3 L5      C305                Ring AG & Co. KGaA         NA                     #>  4 L6      C304                Kassulke-Kassulke          NA                     #>  5 L6      C304                Kassulke-Kassulke          NA                     #>  6 L7      C227                Morissette Group           NA                     #>  7 L7      C227                Morissette Group           NA                     #>  8 L8      C303                Barone s.r.l.              NA                     #>  9 L9      C301                Werner Werner AG & Co. KG… IP10                   #> 10 L9      C301                Werner Werner AG & Co. KG… IP10                   #> # ℹ 319 more rows #> # ℹ abbreviated name: ¹​id_intermediate_parent_1 #> # ℹ 25 more variables: name_intermediate_parent_1 <chr>, #> #   id_ultimate_parent <chr>, name_ultimate_parent <chr>, #> #   loan_size_outstanding <dbl>, loan_size_outstanding_currency <chr>, #> #   loan_size_credit_limit <dbl>, loan_size_credit_limit_currency <chr>, #> #   sector_classification_system <chr>, …"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/chunk-your-data.html","id":"anecdote","dir":"Articles","previous_headings":"","what":"Anecdote","title":"Using `match_name()` with large loanbooks","text":"tested match_name() datasets size (disk .csv file) 20MB loanbook dataset 100MB abcd dataset. Feeding match_name() entire loanbook crashed R session. feeding sequence 30 chunks run 25’ – successfully; combined result 10 million rows:","code":"sector                       data --------------------------------- 1 automotive     [2,644,628 × 15] 2 aviation         [377,200 × 15] 3 cement           [942,526 × 15] 4 oil and gas    [1,551,805 × 15] 5 power          [7,353,772 × 15] 6 shipping       [4,194,067 × 15] 7 steel                 [15 × 15]"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/matching-coverage.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Calculating Matching Coverage","text":"First need load useful packages: use example datasets r2dii.data. demonstrate point, create loanbook dataset two mismatching loans: run matching algorithm loanbook: Note matched dataset contain loans matched successfully. determine coverage, need go back original loanbook dataset. must determine 2DII sectors loan, dictated sector_classification_direct_loantaker column. , join loanbook sector_classifications dataset, lists sector classification code standards used ‘PACTA’. Unfortunately need work around two caveats (may ignore conceptually uninteresting): two datasets, columns want merge different names. use argument left_join() merge columns sector_classification_system sector_classification_direct_loantaker (loanbook) columns code_system code (sector_classifications), respectively. two datasets, sector classification codes represented different data-types. modify column sector_classification_direct_loantaker left_join() type corresponding column code (otherwise left_join() throws error), left_join() restore original type. can join two datasets together, generate coverage dataset:","code":"library(dplyr, warn.conflicts = FALSE) library(purrr) library(ggplot2) library(r2dii.data) library(r2dii.match) loanbook <- loanbook_demo %>%    mutate(     name_ultimate_parent =        ifelse(id_loan == \"L1\", \"unmatched company name\", name_ultimate_parent),     sector_classification_direct_loantaker =        ifelse(id_loan == \"L2\", \"99\", sector_classification_direct_loantaker)   ) matched <- loanbook %>%      match_name(abcd_demo) %>%      prioritize() #> Warning: Some `sector_classification_direct_loantaker` are unknown:99 #> ℹ If you wish to request a new sector classification system, please create an issue here: #> • https://github.com/RMI-PACTA/r2dii.data/issues #> ℹ Or contact the PACTA team here: #> • pacta4banks@rmi.org merge_by <- c(\"code_system\", \"code\") %>%    set_names(paste0(\"sector_classification_\", c(\"system\", \"direct_loantaker\")))  loanbook_with_sectors <- loanbook %>%    modify_at(names(merge_by)[[2]], as.character) %>%    left_join(sector_classifications, by = merge_by) %>%    modify_at(names(merge_by)[[2]], as.character) coverage <- left_join(loanbook_with_sectors, matched) %>%    mutate(     loan_size_outstanding = as.numeric(loan_size_outstanding),     loan_size_credit_limit = as.numeric(loan_size_credit_limit),     matched = case_when(       score == 1   ~ \"Matched\",        is.na(score) ~ \"Not Matched\",       TRUE         ~ \"Not Mached\"     ),     sector = case_when(       borderline == TRUE & matched == \"Not Matched\" ~ \"not in scope\",       TRUE ~ sector     )   ) #> Joining with `by = join_by(id_loan, id_direct_loantaker, name_direct_loantaker, #> id_intermediate_parent_1, name_intermediate_parent_1, id_ultimate_parent, #> name_ultimate_parent, loan_size_outstanding, loan_size_outstanding_currency, #> loan_size_credit_limit, loan_size_credit_limit_currency, #> sector_classification_system, sector_classification_input_type, #> sector_classification_direct_loantaker, fi_type, flag_project_finance_loan, #> name_project, lei_direct_loantaker, isin_direct_loantaker, sector, borderline)`"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/matching-coverage.html","id":"calculate-the-portion-of-your-loanbook-covered-by-dollar-value","dir":"Articles","previous_headings":"","what":"1. Calculate the portion of your loanbook covered by dollar value","title":"Calculating Matching Coverage","text":"coverage dataset, can calculate total loanbook coverage dollar value. Let’s create two helper functions, one calculate dollar-value another one plot coverage general. Let’s first explore loans.  calculate total, -scope, loanbook coverage:","code":"dollar_value <- function(data, ...) {   data %>%      group_by(matched, ...) %>%      summarize(loan_size_outstanding = sum(loan_size_outstanding)) }  plot_coverage <- function(data, x, y) {   ggplot(data) +      geom_col(aes({{x}}, {{y}}, fill = matched)) +     # Use more horizontal space -- avoids overlap on x axis text     theme(legend.position = \"top\") } coverage %>%    dollar_value() %>%    plot_coverage(matched, loan_size_outstanding) coverage %>%    filter(sector != \"not in scope\") %>%    dollar_value() %>%    plot_coverage(matched, loan_size_outstanding)"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/matching-coverage.html","id":"break-down-by-sector","dir":"Articles","previous_headings":"","what":"Break down by sector","title":"Calculating Matching Coverage","text":"may break-plot sector:  even , matching level:","code":"coverage %>%    dollar_value(sector) %>%    plot_coverage(sector, loan_size_outstanding) #> `summarise()` has grouped output by 'matched'. You can override using the #> `.groups` argument. coverage %>%    mutate(matched = case_when(     matched == \"Matched\" & level == \"direct_loantaker\"      ~ \"Matched DL\",     matched == \"Matched\" & level == \"intermediate_parent_1\" ~ \"Matched IP1\",     matched == \"Matched\" & level == \"ultimate_parent\"       ~ \"Matched UP\",     matched == \"Not Matched\"                                ~ \"Not Matched\",     TRUE                                                    ~ \"Catch unknown\"   )) %>%    dollar_value(sector) %>%    plot_coverage(sector, loan_size_outstanding) #> `summarise()` has grouped output by 'matched'. You can override using the #> `.groups` argument."},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/matching-coverage.html","id":"count-the-number-of-companies","dir":"Articles","previous_headings":"","what":"2. Count the number of companies","title":"Calculating Matching Coverage","text":"might also interested knowing many companies loanbook matched. probably makes sense direct_loantaker level:","code":"companies_matched <- coverage %>%    group_by(sector, matched) %>%    summarize(no_companies = n_distinct(name_direct_loantaker)) #> `summarise()` has grouped output by 'sector'. You can override using the #> `.groups` argument.  companies_matched %>%    plot_coverage(sector, no_companies)"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/matching-coverage.html","id":"a-note-on-sector-classifications-and-the-borderline-flag","dir":"Articles","previous_headings":"","what":"A Note on Sector Classifications and the borderline Flag","title":"Calculating Matching Coverage","text":"zoo sector classification code systems . granular, . Since currently cover particular portion supply chain (.e. production), important try match ABCD companies actually active portion supply chain. issue arises , example, company classified “power transmission” sector. perfect world, companies produce electricity, try match . practice, however, find often overlap. reason, introduced borderline flag. example , see two classification codes coming SIC classification standard: Notice code D35.11 corresponds power generation. identical match PACTA’s power sector, thus borderline flag set FALSE. contrast, code D35.14 corresponds distribution electricity. perfect world, set code scope, however still chance companies produce electricity. reason, mapped power borderline = TRUE. practice, company borderline TRUE matched, consider company scope. borderline TRUE isn’t matched, consider scope.","code":"r2dii.data::nace_classification %>%    filter(code %in% c(\"D35.11\", \"D35.14\")) #> # A tibble: 2 × 6 #>   original_code description                      code  sector borderline version #>   <chr>         <chr>                            <chr> <chr>  <lgl>      <chr>   #> 1 35.11         35.11 Production of electricity… D35.… power  FALSE      2.1     #> 2 35.14         35.14 Distribution of electrici… D35.… power  TRUE       2.1"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/r2dii-match-0-0-1.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"r2dii.match 0.0.1","text":"big thanks 5 contributors helped ideas, code, reviews: cjyetman, Clare2D, georgeharris2deg, koopmand, vintented.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/r2dii-match.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Introduction to r2dii.match","text":"use package r2dii.match access important functions ’ll learn . also use example datasets package r2dii.data, optional convenient functions packages dplyr readr.","code":"library(dplyr, warn.conflicts = FALSE) library(r2dii.data) library(r2dii.match)"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/r2dii-match.html","id":"format-input-data-loanbook-and-asset-based-company-data-abcd","dir":"Articles","previous_headings":"","what":"Format input data loanbook and asset-based company data (abcd)","title":"Introduction to r2dii.match","text":"need two datasets: “loanbook” “asset-based company dataset” (abcd). formatted like: loanbook_demo abcd_demo (r2dii.data package). note sector classification: Matches preferred sector loanbook matches sector abcd. loanbook sector determined internally using sector_classification_system sector_classification_direct_loantaker columns. Currently, allow couple specific values sector_classification_system: like use different classification system, please raise issue r2dii.data can incorporate . want use loanbook_demo abcd_demo template create datasets, : Write loanbook_demo.csv abcd_demo.csv : dataset, replace demo data data. Save dataset , example, your_loanbook.csv your_abcd.csv. Read datasets back R : continue use *_demo datasets, pretending contain data .","code":"sector_classifications$code_system %>%   unique() #> [1] \"CNB\"   \"GICS\"  \"ISIC\"  \"NACE\"  \"NAICS\" \"PSIC\"  \"SIC\" loanbook_demo #> # A tibble: 283 × 19 #>    id_loan id_direct_loantaker name_direct_loantaker      id_intermediate_pare…¹ #>    <chr>   <chr>               <chr>                      <chr>                  #>  1 L1      C294                Vitale Group               NA                     #>  2 L2      C293                Moen-Moen                  NA                     #>  3 L3      C292                Rowe-Rowe                  IP5                    #>  4 L4      C299                Fadel-Fadel                NA                     #>  5 L5      C305                Ring AG & Co. KGaA         NA                     #>  6 L6      C304                Kassulke-Kassulke          NA                     #>  7 L7      C227                Morissette Group           NA                     #>  8 L8      C303                Barone s.r.l.              NA                     #>  9 L9      C301                Werner Werner AG & Co. KG… IP10                   #> 10 L10     C302                De rosa s.r.l.             NA                     #> # ℹ 273 more rows #> # ℹ abbreviated name: ¹​id_intermediate_parent_1 #> # ℹ 15 more variables: name_intermediate_parent_1 <chr>, #> #   id_ultimate_parent <chr>, name_ultimate_parent <chr>, #> #   loan_size_outstanding <dbl>, loan_size_outstanding_currency <chr>, #> #   loan_size_credit_limit <dbl>, loan_size_credit_limit_currency <chr>, #> #   sector_classification_system <chr>, …  abcd_demo #> # A tibble: 4,972 × 14 #>    company_id name_company         lei   sector technology production_unit  year #>    <chr>      <chr>                <chr> <chr>  <chr>      <chr>           <int> #>  1 184        Giordano, Giordano … 2756… power  hydrocap   MW               2020 #>  2 184        Giordano, Giordano … 2756… power  hydrocap   MW               2021 #>  3 184        Giordano, Giordano … 2756… power  hydrocap   MW               2022 #>  4 184        Giordano, Giordano … 2756… power  hydrocap   MW               2023 #>  5 184        Giordano, Giordano … 2756… power  hydrocap   MW               2024 #>  6 184        Giordano, Giordano … 2756… power  hydrocap   MW               2025 #>  7 527        Vitali, Vitali e Vi… 9341… cement integrate… tonnes per year  2020 #>  8 527        Vitali, Vitali e Vi… 9341… cement integrate… tonnes per year  2021 #>  9 527        Vitali, Vitali e Vi… 9341… cement integrate… tonnes per year  2022 #> 10 527        Vitali, Vitali e Vi… 9341… cement integrate… tonnes per year  2023 #> # ℹ 4,962 more rows #> # ℹ 7 more variables: production <dbl>, emission_factor <dbl>, #> #   country_of_domicile <chr>, plant_location <chr>, is_ultimate_owner <lgl>, #> #   abcd_timestamp <chr>, emission_factor_unit <chr> # Writting to current working directory  loanbook_demo %>%    readr::write_csv(path = \"loanbook_demo.csv\")  abcd_demo %>%    readr::write_csv(path = \"abcd_demo.csv\") # Reading from current working directory  your_loanbook <- readr::read_csv(\"your_loanbook.csv\") your_abcd <- readr::read_csv(\"your_abcd.csv\") # WARNING: Skip this to avoid overwriting your data with our demo data your_loanbook <- loanbook_demo your_abcd <- abcd_demo"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/r2dii-match.html","id":"score-the-goodness-of-the-match-between-the-loanbook-and-abcd-datasets","dir":"Articles","previous_headings":"","what":"Score the goodness of the match between the loanbook and abcd datasets","title":"Introduction to r2dii.match","text":"match_name() scores match names loanbook dataset (lbk) names asset-based company dataset (abcd). names come columns name_direct_loantaker, name_intermediate_parent_* name_ultimate_parent loanbook dataset, column name_company asset-based company dataset. can number name_intermediate_parent_* columns, * indicates level corporate tree direct_loantaker. raw names internally transformed applying best-practices commonly used name matching algorithms, : Remove special characters. Replace language specific characters. Abbreviate certain names reduce importance matching. Removing corporate suffixes necessary. Spell numbers increase importance. similarity scored internally-transformed names loanbook abcd. (information scoring algorithm used, see: stringdist::stringsim()). match_name() defaults scoring matches name strings belong sector. Using by_sector = FALSE removes limitation – increasing computation time, number potentially incorrect matches manually validate. min_score allows minimum threshold score.","code":"match_name(your_loanbook, your_abcd) #> # A tibble: 329 × 28 #>    id_loan id_direct_loantaker name_direct_loantaker      id_intermediate_pare…¹ #>    <chr>   <chr>               <chr>                      <chr>                  #>  1 L1      C294                Vitale Group               NA                     #>  2 L3      C292                Rowe-Rowe                  IP5                    #>  3 L5      C305                Ring AG & Co. KGaA         NA                     #>  4 L6      C304                Kassulke-Kassulke          NA                     #>  5 L6      C304                Kassulke-Kassulke          NA                     #>  6 L7      C227                Morissette Group           NA                     #>  7 L7      C227                Morissette Group           NA                     #>  8 L8      C303                Barone s.r.l.              NA                     #>  9 L9      C301                Werner Werner AG & Co. KG… IP10                   #> 10 L9      C301                Werner Werner AG & Co. KG… IP10                   #> # ℹ 319 more rows #> # ℹ abbreviated name: ¹​id_intermediate_parent_1 #> # ℹ 24 more variables: name_intermediate_parent_1 <chr>, #> #   id_ultimate_parent <chr>, name_ultimate_parent <chr>, #> #   loan_size_outstanding <dbl>, loan_size_outstanding_currency <chr>, #> #   loan_size_credit_limit <dbl>, loan_size_credit_limit_currency <chr>, #> #   sector_classification_system <chr>, … match_name(your_loanbook, your_abcd, by_sector = FALSE) %>%   nrow() #> [1] 675  # Compare match_name(your_loanbook, your_abcd, by_sector = TRUE) %>%   nrow() #> [1] 329 matched <- match_name(your_loanbook, your_abcd, min_score = 0.9) range(matched$score) #> [1] 0.9007692 1.0000000"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/r2dii-match.html","id":"maybe-overwrite-matches","dir":"Articles","previous_headings":"Score the goodness of the match between the loanbook and abcd datasets","what":"Maybe overwrite matches","title":"Introduction to r2dii.match","text":"happy matching coverage achieved, proceed next step. Otherwise, can manually add matches, found automatically match_name(). , manually inspect abcd find company like match loanbook. match found, use excel write .csv file similar overwrite_demo, : level indicates level manual match added (e.g. direct_loantaker) id_2dii id loanbook company like match (output match_name()) name abcd company like manually link sector optionally can also overwrite sector. source can used later determine manual matches came . Notice warning.","code":"matched <- match_name(   your_loanbook, your_abcd,   min_score = 0.9, overwrite = overwrite_demo ) #> Warning: You should only overwrite a sector at the level of the 'direct #> loantaker' (DL). If you overwrite a sector at the level of the 'ultimate #> parent' (UP) you consequently overwrite all children of that sector, #> which most likely is a mistake."},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/r2dii-match.html","id":"validate-matches","dir":"Articles","previous_headings":"","what":"Validate matches","title":"Introduction to r2dii.match","text":"Write output match_name() .csv file : Compare, edit, save data manually: Open matched.csv spreadsheet editor (Excel, Google Sheets, etc.). Compare columns name name_abcd manually determine match valid. information can used conjunction just names ensure two entities match (sector, internal information company structure, etc.) happy match, set score value 1. Otherwise set leave score value anything 1. Save edited file , say, valid_matches.csv. Re-read edited file (validated) :","code":"# Writting to current working directory matched %>%   readr::write_csv(\"matched.csv\") # Reading from current working directory valid_matches <- readr::read_csv(\"valid_matches.csv\")"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/articles/r2dii-match.html","id":"prioritize-validated-matches-by-level","dir":"Articles","previous_headings":"","what":"Prioritize validated matches by level","title":"Introduction to r2dii.match","text":"validated dataset may multiple matches per loan. Consider case loan given “Acme Power USA”, subsidiary “Acme Power Co.”. may “Acme Power USA” “Acme Power Co.” abcd, two valid matches loan. get best match , use prioritize() – picks rows score 1 level per loan highest priority(): default, highest priority refers granular match (direct_loantaker). default priority set internally via prioritize_levels(). may use different priority. One way pass function priority. example, use rev reverse default priority.","code":"# Pretend we validated the matched dataset valid_matches <- matched  some_interesting_columns <- c(\"id_2dii\", \"level\", \"score\")  valid_matches %>%   prioritize() %>%   select(all_of(some_interesting_columns)) #> # A tibble: 175 × 3 #>    id_2dii level            score #>    <chr>   <chr>            <dbl> #>  1 DL129   direct_loantaker     1 #>  2 DL144   direct_loantaker     1 #>  3 DL270   direct_loantaker     1 #>  4 DL86    direct_loantaker     1 #>  5 DL5     direct_loantaker     1 #>  6 DL80    direct_loantaker     1 #>  7 DL150   direct_loantaker     1 #>  8 DL3     direct_loantaker     1 #>  9 DL65    direct_loantaker     1 #> 10 DL79    direct_loantaker     1 #> # ℹ 165 more rows prioritize_level(matched) #> [1] \"direct_loantaker\"      \"intermediate_parent_1\" \"ultimate_parent\" matched %>%   prioritize(priority = rev) %>%   select(all_of(some_interesting_columns)) #> # A tibble: 175 × 3 #>    id_2dii level           score #>    <chr>   <chr>           <dbl> #>  1 UP190   ultimate_parent     1 #>  2 UP101   ultimate_parent     1 #>  3 UP39    ultimate_parent     1 #>  4 UP63    ultimate_parent     1 #>  5 UP224   ultimate_parent     1 #>  6 UP132   ultimate_parent     1 #>  7 UP12    ultimate_parent     1 #>  8 UP20    ultimate_parent     1 #>  9 UP134   ultimate_parent     1 #> 10 UP127   ultimate_parent     1 #> # ℹ 165 more rows"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alex Axthelm. Author, maintainer. Jackson Hoffart. Author, contractor. Mauro Lepore. Author, contractor. Klaus Hagedorn. Author. Florence Palandri. Author. Evgeny Petrovsky. Author. Rocky Mountain Institute. Copyright holder, funder.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Axthelm , Hoffart J, Lepore M, Hagedorn K, Palandri F, Petrovsky E (2024). r2dii.match: Tools Match Corporate Lending Portfolios Climate Data. R package version 0.2.0.9000,  https://github.com/RMI-PACTA/r2dii.match, https://rmi-pacta.github.io/r2dii.match/.","code":"@Manual{,   title = {r2dii.match: Tools to Match Corporate Lending Portfolios with Climate Data},   author = {Alex Axthelm and Jackson Hoffart and Mauro Lepore and Klaus Hagedorn and Florence Palandri and Evgeny Petrovsky},   year = {2024},   note = {R package version 0.2.0.9000,  https://github.com/RMI-PACTA/r2dii.match},   url = {https://rmi-pacta.github.io/r2dii.match/}, }"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/index.html","id":"r2diimatch-","dir":"","previous_headings":"","what":"Tools to Match Corporate Lending Portfolios with Climate Data","title":"Tools to Match Corporate Lending Portfolios with Climate Data","text":"tools implement R fundamental part software PACTA (Paris Agreement Capital Transition Assessment), free tool calculates alignment financial portfolios climate scenarios (https://www.transitionmonitor.com/). Financial institutions use PACTA study capital allocation impacts climate. package matches data financial portfolios asset level data market-intelligence databases (e.g. power plant capacities, emission factors, etc.). first step assess financial portfolio aligns climate goals.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools to Match Corporate Lending Portfolios with Climate Data","text":"Install released version r2dii.match CRAN : install development version r2dii.match GitHub :","code":"# install.packages(\"r2dii.match\") # install.packages(\"pak\") pak::pak(\"RMI-PACTA/r2dii.match\")"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tools to Match Corporate Lending Portfolios with Climate Data","text":"Matching achieved two main steps:","code":"library(r2dii.data) library(r2dii.match)"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/index.html","id":"id_1-run-fuzzy-matching","dir":"","previous_headings":"Example","what":"1. Run fuzzy matching","title":"Tools to Match Corporate Lending Portfolios with Climate Data","text":"match_name() extract unique counterparty names columns: direct_loantaker, ultimate_parent intermediate_parent* run fuzzy matching company names abcd:","code":"match_result <- match_name(loanbook_demo, abcd_demo) match_result  #> # A tibble: 329 × 28 #>    id_loan id_direct_loantaker name_direct_loantaker      id_intermediate_pare…¹ #>    <chr>   <chr>               <chr>                      <chr>                  #>  1 L1      C294                Vitale Group               <NA>                   #>  2 L3      C292                Rowe-Rowe                  IP5                    #>  3 L5      C305                Ring AG & Co. KGaA         <NA>                   #>  4 L6      C304                Kassulke-Kassulke          <NA>                   #>  5 L6      C304                Kassulke-Kassulke          <NA>                   #>  6 L7      C227                Morissette Group           <NA>                   #>  7 L7      C227                Morissette Group           <NA>                   #>  8 L8      C303                Barone s.r.l.              <NA>                   #>  9 L9      C301                Werner Werner AG & Co. KG… IP10                   #> 10 L9      C301                Werner Werner AG & Co. KG… IP10                   #> # ℹ 319 more rows #> # ℹ abbreviated name: ¹​id_intermediate_parent_1 #> # ℹ 24 more variables: name_intermediate_parent_1 <chr>, #> #   id_ultimate_parent <chr>, name_ultimate_parent <chr>, #> #   loan_size_outstanding <dbl>, loan_size_outstanding_currency <chr>, #> #   loan_size_credit_limit <dbl>, loan_size_credit_limit_currency <chr>, #> #   sector_classification_system <chr>, …"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/index.html","id":"id_2-prioritize-validated-matches","dir":"","previous_headings":"Example","what":"2. Prioritize validated matches","title":"Tools to Match Corporate Lending Portfolios with Climate Data","text":"user manually validate output [match_name()], ensuring value column score equal 1 perfect matches . validated, prioritize() function, choose valid matches, prioritizing (default) direct_loantaker matches ultimate_parent matches: result dataset identical columns input loanbook, added columns bridging matched loans abcd counterpart. Get started.","code":"prioritize(match_result) #> # A tibble: 177 × 28 #>    id_loan id_direct_loantaker name_direct_loantaker      id_intermediate_pare…¹ #>    <chr>   <chr>               <chr>                      <chr>                  #>  1 L6      C304                Kassulke-Kassulke          <NA>                   #>  2 L13     C297                Ladeck                     <NA>                   #>  3 L20     C287                Weinhold                   <NA>                   #>  4 L21     C286                Gallo Group                <NA>                   #>  5 L22     C285                Austermuhle GmbH           <NA>                   #>  6 L24     C282                Ferraro-Ferraro Group      <NA>                   #>  7 L25     C281                Lockman, Lockman and Lock… <NA>                   #>  8 L26     C280                Ankunding, Ankunding and … <NA>                   #>  9 L27     C278                Donati-Donati Group        <NA>                   #> 10 L28     C276                Ferraro, Ferraro e Ferrar… <NA>                   #> # ℹ 167 more rows #> # ℹ abbreviated name: ¹​id_intermediate_parent_1 #> # ℹ 24 more variables: name_intermediate_parent_1 <chr>, #> #   id_ultimate_parent <chr>, name_ultimate_parent <chr>, #> #   loan_size_outstanding <dbl>, loan_size_outstanding_currency <chr>, #> #   loan_size_credit_limit <dbl>, loan_size_credit_limit_currency <chr>, #> #   sector_classification_system <chr>, …"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Tools to Match Corporate Lending Portfolios with Climate Data","text":"project received funding European Union LIFE program International Climate Initiative (IKI). Federal Ministry Environment, Nature Conservation Nuclear Safety (BMU) supports initiative basis decision adopted German Bundestag. views expressed sole responsibility authors necessarily reflect views funders. funders responsible use may made information contains.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/crucial_lbk.html","id":null,"dir":"Reference","previous_headings":"","what":"Crucial loanbook columns for match_name() — crucial_lbk","title":"Crucial loanbook columns for match_name() — crucial_lbk","text":"helper select minimum loanbook columns need run match_name(). Using columns may use much time memory.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/crucial_lbk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crucial loanbook columns for match_name() — crucial_lbk","text":"","code":"crucial_lbk()"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/crucial_lbk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crucial loanbook columns for match_name() — crucial_lbk","text":"character vector.","code":""},{"path":[]},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/crucial_lbk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crucial loanbook columns for match_name() — crucial_lbk","text":"","code":"crucial_lbk() #> [1] \"id_ultimate_parent\"                     #> [2] \"name_ultimate_parent\"                   #> [3] \"id_direct_loantaker\"                    #> [4] \"name_direct_loantaker\"                  #> [5] \"sector_classification_system\"           #> [6] \"sector_classification_direct_loantaker\""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/match_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Match a loanbook to asset-based company data (abcd) by the name_* columns — match_name","title":"Match a loanbook to asset-based company data (abcd) by the name_* columns — match_name","text":"match_name() scores match names loanbook dataset (columns can name_direct_loantaker, name_intermediate_parent* name_ultimate_parent) names asset-based company data (column name_company). raw names first internally transformed, aliases assigned. similarity aliases loanbook abcd scored using stringdist::stringsim().","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/match_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match a loanbook to asset-based company data (abcd) by the name_* columns — match_name","text":"","code":"match_name(   loanbook,   abcd,   by_sector = TRUE,   min_score = 0.8,   method = \"jw\",   p = 0.1,   overwrite = NULL,   join_id = NULL,   ... )"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/match_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match a loanbook to asset-based company data (abcd) by the name_* columns — match_name","text":"loanbook, abcd data frames structured like r2dii.data::loanbook_demo r2dii.data::abcd_demo. by_sector names compared companies belong sector? min_score number 0-1, set minimum score threshold. score 1 perfect match. method Method distance calculation. One c(\"osa\", \"lv\", \"dl\", \"hamming\", \"lcs\", \"qgram\", \"cosine\", \"jaccard\", \"jw\", \"soundex\"). See stringdist::stringdist-metrics. p Prefix factor Jaro-Winkler distance. valid range  p 0 <= p <= 0.25. p=0 (default), Jaro-distance returned. Applies method='jw'. overwrite data frame used overwrite sector /name columns particular direct loantaker ultimate parent. overwrite sector, value name column NA vice-versa. file can used manually match loanbook companies abcd. join_id join specification passed dplyr::inner_join(). character string, assumes identical join columns loanbook abcd. named character vector, uses name join column loanbook value join column abcd. ... Arguments passed stringdist::stringsim().","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/match_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match a loanbook to asset-based company data (abcd) by the name_* columns — match_name","text":"data frame groups () columns loanbook, additional columns: id_2dii - id used internally match_name() distinguish companies level - level granularity loan matched (e.g direct_loantaker ultimate_parent) sector - sector loanbook company sector_abcd - sector abcd company name - name loanbook company name_abcd - name abcd company score - score match (manually set 1 prior calling prioritize() validate match) source - determines source match. (equal loanbook unless match overwrite returned rows depend argument min_value result column score loan: * row score equal 1, match_name() returns rows score equals 1, dropping rows. * row score equal 1,match_name() returns rows score equal greater min_score. * match output 0-row tibble expected column names -- type stability.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/match_name.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"Match a loanbook to asset-based company data (abcd) by the name_* columns — match_name","text":"r2dii.match.sector_classifications: Allows use sector_classififications instead default. feature experimental may dropped /become new argument match_name().","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/match_name.html","id":"assigning-aliases","dir":"Reference","previous_headings":"","what":"Assigning aliases","title":"Match a loanbook to asset-based company data (abcd) by the name_* columns — match_name","text":"transformation process used compare names loanbook abcd datasets applies best practices commonly used name matching algorithms: Remove special characters. Replace language specific characters. Abbreviate certain names reduce importance matching. Spell numbers increase importance.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/match_name.html","id":"handling-grouped-data","dir":"Reference","previous_headings":"","what":"Handling grouped data","title":"Match a loanbook to asset-based company data (abcd) by the name_* columns — match_name","text":"function ignores preserves existing groups.","code":""},{"path":[]},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/match_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match a loanbook to asset-based company data (abcd) by the name_* columns — match_name","text":"","code":"if (FALSE) { library(r2dii.data) library(tibble)  # Small data for examples loanbook <- head(loanbook_demo, 50) abcd <- head(abcd_demo, 50)  match_name(loanbook, abcd)  match_name(loanbook, abcd, min_score = 0.9)  # Use your own `sector_classifications` your_classifications <- tibble(   sector = \"power\",   borderline = FALSE,   code = \"D35.11\",   code_system = \"XYZ\" )  # match on LEI loanbook <- tibble(   sector_classification_system = \"XYZ\",   sector_classification_direct_loantaker = \"D35.11\",   id_ultimate_parent = \"UP15\",   name_ultimate_parent = \"Won't fuzzy match\",   id_direct_loantaker = \"C294\",   name_direct_loantaker = \"Won't fuzzy match\",   lei_direct_loantaker = \"LEI123\" )  abcd <- tibble(   name_company = \"alpine knits india pvt. limited\",   sector = \"power\",   lei = \"LEI123\" )  match_name(loanbook, abcd, join_by = c(lei_direct_loantaker = \"lei\"))  restore <- options(r2dii.match.sector_classifications = your_classifications)  loanbook <- tibble(   sector_classification_system = \"XYZ\",   sector_classification_direct_loantaker = \"D35.11\",   id_ultimate_parent = \"UP15\",   name_ultimate_parent = \"Alpine Knits India Pvt. Limited\",   id_direct_loantaker = \"C294\",   name_direct_loantaker = \"Yuamen Xinneng Thermal Power Co Ltd\" )  abcd <- tibble(   name_company = \"alpine knits india pvt. limited\",   sector = \"power\" )  match_name(loanbook, abcd)  # Cleanup options(restore) }"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick rows where score is 1 and level per loan is of highest priority — prioritize","title":"Pick rows where score is 1 and level per loan is of highest priority — prioritize","text":"multiple perfect matches found per loan (e.g. match direct_loantaker level ultimate_parent level), must prioritize desired match. default, highest priority granular match (.e. direct_loantaker).","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick rows where score is 1 and level per loan is of highest priority — prioritize","text":"","code":"prioritize(data, priority = NULL)"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick rows where score is 1 and level per loan is of highest priority — prioritize","text":"data data frame like validated output match_name(). See Details validate data. priority One : NULL: defaults default level priority returned prioritize_level(). character vector giving custom priority. function apply output prioritize_level(), e.g. rev. quosure-style lambda function, e.g. ~ rev(.x).","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick rows where score is 1 and level per loan is of highest priority — prioritize","text":"data frame single row per loan, score 1 priority level highest.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pick rows where score is 1 and level per loan is of highest priority — prioritize","text":"validate data Write output match_name() .csv file :   Compare, edit, save data manually: Open matched.csv spreadsheet editor (Excel, Google Sheets, etc.). Compare columns name name_abcd manually determine match valid. information can used conjunction just names ensure two entities match (sector, internal information company structure, etc.) Edit data: happy match, set score value 1. Otherwise set leave score value anything 1. Save edited file , say, valid_matches.csv. Re-read edited file (validated) :","code":"# Writting to current working directory matched %>%   readr::write_csv(\"matched.csv\") # Reading from current working directory valid_matches <- readr::read_csv(\"valid_matches.csv\")"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize.html","id":"handling-grouped-data","dir":"Reference","previous_headings":"","what":"Handling grouped data","title":"Pick rows where score is 1 and level per loan is of highest priority — prioritize","text":"function ignores preserves existing groups.","code":""},{"path":[]},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pick rows where score is 1 and level per loan is of highest priority — prioritize","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # styler: off matched <- tribble(   ~sector, ~sector_abcd,  ~score, ~id_loan,                ~level,    \"coal\",      \"coal\",       1,     \"aa\",     \"ultimate_parent\",    \"coal\",      \"coal\",       1,     \"aa\",    \"direct_loantaker\",    \"coal\",      \"coal\",       1,     \"bb\", \"intermediate_parent\",    \"coal\",      \"coal\",       1,     \"bb\",     \"ultimate_parent\", ) # styler: on  prioritize_level(matched) #> [1] \"direct_loantaker\"    \"intermediate_parent\" \"ultimate_parent\"      # Using default priority prioritize(matched) #> # A tibble: 2 × 5 #>   sector sector_abcd score id_loan level               #>   <chr>  <chr>       <dbl> <chr>   <chr>               #> 1 coal   coal            1 aa      direct_loantaker    #> 2 coal   coal            1 bb      intermediate_parent  # Using the reverse of the default priority prioritize(matched, priority = rev) #> # A tibble: 2 × 5 #>   sector sector_abcd score id_loan level           #>   <chr>  <chr>       <dbl> <chr>   <chr>           #> 1 coal   coal            1 aa      ultimate_parent #> 2 coal   coal            1 bb      ultimate_parent  # Same prioritize(matched, priority = ~ rev(.x)) #> # A tibble: 2 × 5 #>   sector sector_abcd score id_loan level           #>   <chr>  <chr>       <dbl> <chr>   <chr>           #> 1 coal   coal            1 aa      ultimate_parent #> 2 coal   coal            1 bb      ultimate_parent  # Using a custom priority bad_idea <- c(\"intermediate_parent\", \"ultimate_parent\", \"direct_loantaker\")  prioritize(matched, priority = bad_idea) #> # A tibble: 2 × 5 #>   sector sector_abcd score id_loan level               #>   <chr>  <chr>       <dbl> <chr>   <chr>               #> 1 coal   coal            1 bb      intermediate_parent #> 2 coal   coal            1 aa      ultimate_parent"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange unique level values in default order of priority — prioritize_level","title":"Arrange unique level values in default order of priority — prioritize_level","text":"Arrange unique level values default order priority","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange unique level values in default order of priority — prioritize_level","text":"","code":"prioritize_level(data)"},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange unique level values in default order of priority — prioritize_level","text":"data data frame, commonly output match_name().","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange unique level values in default order of priority — prioritize_level","text":"character vector default level priority per loan.","code":""},{"path":[]},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/prioritize_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange unique level values in default order of priority — prioritize_level","text":"","code":"matched <- tibble::tibble(   level = c(     \"intermediate_parent_1\",     \"direct_loantaker\",     \"direct_loantaker\",     \"direct_loantaker\",     \"ultimate_parent\",     \"intermediate_parent_2\"   ) ) prioritize_level(matched) #> [1] \"direct_loantaker\"      \"intermediate_parent_1\" \"intermediate_parent_2\" #> [4] \"ultimate_parent\""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/r2dii.match-package.html","id":null,"dir":"Reference","previous_headings":"","what":"r2dii.match: Tools to Match Corporate Lending Portfolios with Climate Data — r2dii.match-package","title":"r2dii.match: Tools to Match Corporate Lending Portfolios with Climate Data — r2dii.match-package","text":"tools implement R fundamental part software 'PACTA' (Paris Agreement Capital Transition Assessment), free tool calculates alignment financial portfolios climate scenarios (https://www.transitionmonitor.com/). Financial institutions use 'PACTA' study capital allocation decisions align climate change mitigation goals. package matches data corporate lending portfolios asset level data market-intelligence databases (e.g. power plant capacities, emission factors, etc.). first step assess financial portfolio aligns climate goals.","code":""},{"path":[]},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/reference/r2dii.match-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"r2dii.match: Tools to Match Corporate Lending Portfolios with Climate Data — r2dii.match-package","text":"Maintainer: Alex Axthelm aaxthelm@rmi.org (ORCID) Authors: Jackson Hoffart jackson.hoffart@gmail.com (ORCID) [contractor] Mauro Lepore maurolepore@gmail.com (ORCID) [contractor] Klaus Hagedorn klaus@2degrees-investing.org Florence Palandri florence@2degrees-investing.org Evgeny Petrovsky contributors: Rocky Mountain Institute PACTA4banks@rmi.org [copyright holder, funder]","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-development-version","dir":"Changelog","previous_headings":"","what":"r2dii.match (development version)","title":"r2dii.match (development version)","text":"r2dii.match now stable.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-020","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.2.0","title":"r2dii.match 0.2.0","text":"CRAN release: 2024-03-25 Complete deprecation ald favour abcd (#399). match_name gains argument join_id allowing optional perfect join based mutual ID column loanbook abcd inputs, prior attempting fuzzy matching (#135).","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-014","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.1.4","title":"r2dii.match 0.1.4","text":"CRAN release: 2023-10-23 to_alias can now handle strange encodings without error (#425, @kalashsinghal @Tilmon).","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-013","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.1.3","title":"r2dii.match 0.1.3","text":"CRAN release: 2022-11-03","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-012","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.1.2","title":"r2dii.match 0.1.2","text":"r2dii.match transferred new organization https://github.com/RMI-PACTA/.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-011","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.1.1","title":"r2dii.match 0.1.1","text":"CRAN release: 2022-09-05 Maintenance release.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-010","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.1.0","title":"r2dii.match 0.1.0","text":"CRAN release: 2022-05-05 New argument abcd match_name() supersedes argument ald (#399).","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-0011","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.0.11","title":"r2dii.match 0.0.11","text":"CRAN release: 2021-09-23 Maintenance release.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-0010","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.0.10","title":"r2dii.match 0.0.10","text":"CRAN release: 2021-06-29 Maintenance release.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-009","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.0.9","title":"r2dii.match 0.0.9","text":"CRAN release: 2021-03-10 options(r2dii.match.sector_classifications = ) users can inject sector_classififications instead default r2dii.data::sector_classifications. feature, user may may choose request sector_classifications added r2dii.data. feature experimental may dropped /become new argument match_name() (#356 @georgeharris2deg @daisy-pacheco)`. match_name() now errors column id_loan input loanbook duplicated value id_loan (@georgeharris2deg #349).","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-008","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.0.8","title":"r2dii.match 0.0.8","text":"CRAN release: 2021-01-04 Maintenance release.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-007","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.0.7","title":"r2dii.match 0.0.7","text":"CRAN release: 2020-12-03 match_name() gains ... pass additional arguments stringdist::stringsim() (@evgeniadimi #310).","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-006","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.0.6","title":"r2dii.match 0.0.6","text":"CRAN release: 2020-10-01 prioritize() 0-row input now returns input untouched (#284). Fix match_name(): Remove dependency nest_by() dplyr 1.0.0 (#303).","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-005","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.0.5","title":"r2dii.match 0.0.5","text":"CRAN release: 2020-09-11 Change license MIT. Increment lifecycle badge “Maturing”. website’s home page now thanks funders. New article using match_name() large loanbooks. News tab website now shows releases date.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-004","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.0.4","title":"r2dii.match 0.0.4","text":"CRAN release: 2020-08-13 New article “Calculating matching coverage” (#264). match_name() now outputs new column borderline (#258). New crucial_lbk() helps select minimum loanbook columns match_name() run (#236). match_name() now runs faster uses less memory (@georgeharris2deg #214). match_name() now converts ald$sector lower case matching (@georgeharris2deg #257). now returns identical output , example, either “POWER” “power”. Notice input “POWER” ald$sector becomes “power” column sector_ald output. match_name() now errors informative message loanbook reserved columns – alias, rowid, sector (#233).","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-003","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.0.3","title":"r2dii.match 0.0.3","text":"CRAN release: 2020-06-30 Enforce dplyr >= 0.8.5 (#216). longer import vctrs; unused.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-002","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.0.2","title":"r2dii.match 0.0.2","text":"CRAN release: 2020-06-04 version includes internal changes.","code":""},{"path":"https://rmi-pacta.github.io/r2dii.match/dev/news/index.html","id":"r2diimatch-001","dir":"Changelog","previous_headings":"","what":"r2dii.match 0.0.1","title":"r2dii.match 0.0.1","text":"CRAN release: 2020-03-28 First release CRAN.","code":""}]
